{
  "openapi": "3.1.1",
  "info": {
    "title": "IAM Microservice API",
    "description": "Identity & Access Management Microservice API - A comprehensive solution for authentication, authorization, user management, and session handling in a microservices ecosystem.\n\n## Features\n- **Multi-factor Authentication**: Password, OTP (SMS/Email), Social Login\n- **Role-Based Access Control (RBAC)**: User groups and permissions\n- **Attribute-Based Access Control (ABAC)**: Policy-based authorization\n- **Session Management**: JWT tokens with refresh capabilities\n- **User Management**: Registration, profile management, contact handling\n- **Security**: AES-256 encryption for sensitive data\n\n## API Versioning\nThis API follows semantic versioning. Current version: v1.0.0\n\n## Rate Limiting\n- Authentication endpoints: 10 requests/minute per IP\n- Authorization endpoints: 100 requests/minute per user\n- Health check: 1000 requests/minute per IP",
    "version": "1.0.0",
    "contact": {
      "name": "IAM Service Team",
      "email": "iam-service@example.com",
      "url": "https://docs.example.com/iam"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "x-service-info": {
      "service-name": "iam-service",
      "team": "Platform Engineering",
      "repository": "https://github.com/example/iam-service",
      "monitoring": "https://monitoring.example.com/iam",
      "documentation": "https://docs.example.com/iam"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080/v1/iam",
      "description": "Local Development Server"
    },
    {
      "url": "https://dev-api.example.com/v1/iam",
      "description": "Development Environment"
    },
    {
      "url": "https://qa-api.example.com/v1/iam",
      "description": "Quality Assurance Environment"
    },
    {
      "url": "https://uat-api.example.com/v1/iam",
      "description": "User Acceptance Testing Environment"
    },
    {
      "url": "https://staging-api.example.com/v1/iam",
      "description": "Staging Environment"
    },
    {
      "url": "https://pre-prod-api.example.com/v1/iam",
      "description": "Pre-Production Environment"
    },
    {
      "url": "https://api.example.com/v1/iam",
      "description": "Production Environment"
    }
  ],
  "tags": [
    {
      "name": "Health",
      "description": "Service health, readiness, and liveness checks for monitoring and load balancing",
      "x-tag-group": "monitoring"
    },
    {
      "name": "Authentication",
      "description": "User authentication operations including registration, login, and multi-factor authentication",
      "x-tag-group": "auth"
    },
    {
      "name": "Authorization (RBAC)",
      "description": "Role-Based Access Control - User groups, roles, and permission management",
      "x-tag-group": "authz"
    },
    {
      "name": "Authorization (ABAC)",
      "description": "Attribute-Based Access Control - Policy management and access evaluation",
      "x-tag-group": "authz"
    },
    {
      "name": "User Management",
      "description": "User profile management, contact information, and account operations",
      "x-tag-group": "user"
    },
    {
      "name": "Session Management",
      "description": "Token management, refresh tokens, and session lifecycle operations",
      "x-tag-group": "session"
    },
    {
      "name": "Attribute Management",
      "description": "User and system attributes used in ABAC policy evaluation",
      "x-tag-group": "policy"
    },
    {
      "name": "Infra & DevOps",
      "description": "Logging, auditing, monitoring, and security alert operations",
      "x-tag-group": "ops"
    }
  ],
  "paths": {
    "/api/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "description": "Check the health status of the IAM microservice. Returns service status, dependencies, and readiness information.",
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "Service is healthy and ready",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["healthy", "degraded", "unhealthy"],
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-15T10:30:00Z"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "uptime": {
                      "type": "string",
                      "example": "72h15m30s"
                    },
                    "dependencies": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "string",
                          "enum": ["healthy", "degraded", "unhealthy"],
                          "example": "healthy"
                        },
                        "redis": {
                          "type": "string",
                          "enum": ["healthy", "degraded", "unhealthy"],
                          "example": "healthy"
                        },
                        "external-auth": {
                          "type": "string",
                          "enum": ["healthy", "degraded", "unhealthy"],
                          "example": "healthy"
                        }
                      }
                    }
                  },
                  "required": ["status", "timestamp", "version"]
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy or not ready",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["unhealthy"],
                      "example": "unhealthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Database connection failed",
                        "Redis unavailable"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Register a new user with personal, contact, authentication, referral, and address information.\n\n**Business Logic / Conditions:**\n- All personal and contact fields must be AES-256 encrypted.\n- `username`, `password`, and `confirmPassword` are required.\n- `password` and `confirmPassword` must match and comply with password policy.\n- Duplicate username/contact returns 409.\n- Missing/invalid fields return 400.\n- Returns user information upon successful registration; no access token is issued.",
        "operationId": "registerUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserRegistrationResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate username/contact",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Password mismatch/invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register/mobile": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user via mobile + OTP",
        "description": "Register user using mobile number and OTP. No access token is issued in the response.",
        "operationId": "registerMobile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterMobileRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserRegistrationResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate mobile",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "OTP invalid or expired",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/register/email": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user via email + OTP",
        "description": "Register user using email and OTP. No access token is issued in the response.",
        "operationId": "registerEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterEmailRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserRegistrationResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate email",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "OTP invalid or expired",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/register/social": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user via social OAuth",
        "description": "Register user using social provider credentials. No access token is issued in the response.",
        "operationId": "registerSocial",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterSocialRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserRegistrationResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate social account",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "OAuth token invalid or expired",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate user via username and password",
        "description": "Authenticate a user using username and password credentials.\n\n**Business Logic / Conditions:**\n- All personal data fields must be AES-256 encrypted before submission.\n- The system validates the format of both `username` and `password` before proceeding.\n- `password` and `confirmPassword` must be identical and comply with the password policy: minimum 8 characters, including uppercase, lowercase, numeric, and special characters.\n- If the `username` or any `contact` already exists in the system, the API returns **409 Duplicate**.\n- If required fields are missing or the payload structure is invalid, the API returns **400 Bad Request**.\n- If password and confirm password do not match, or the format does not comply with security policy, the API returns **422 Unprocessable Entity**.",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication – the user credentials are valid and access is granted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserFullWithTokenResponseDTO"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input (e.g., missing username, password, or malformed JSON payload).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – The username or contact information already exists in the system.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity – Password validation failed (either mismatch or invalid format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/mobile": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate via mobile number and OTP",
        "description": "Authenticate a user using mobile number and OTP.\n\n**Business Logic / Conditions:**\n- All personal and contact fields must be AES-256 encrypted before submission.\n- OTP must match the value sent to the user's mobile number.\n- `referenceId` and `codeRef` must be valid and correspond to a previously generated OTP.\n- The system validates the format of `username` and all required fields.\n- If required fields are missing or payload structure is invalid, returns **400 Bad Request**.\n- If OTP verification fails or has expired, returns **422 Unprocessable Entity**.\n- If the user already exists with the same mobile contact, returns **409 Duplicate**.",
        "operationId": "loginViaMobileOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginMobileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated successfully – OTP verified and user authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserFullWithTokenResponseDTO"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input (e.g., missing OTP, username, or malformed payload).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – Mobile number already registered in the system.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity – OTP verification failed, expired, or invalid format.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/email": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate via email OTP",
        "description": "Authenticate a user using email and OTP.\n\n**Business Logic / Conditions:**\n- All personal and contact fields must be AES-256 encrypted before submission.\n- OTP must match the value sent to the user's email.\n- `referenceId` and `codeRef` must correspond to a previously generated OTP.\n- The system validates the format of `username` and required fields.\n- If required fields are missing or payload structure is invalid, returns **400 Bad Request**.\n- If OTP verification fails or is expired, returns **422 Unprocessable Entity**.\n- If the email is already associated with an existing user, returns **409 Duplicate**.",
        "operationId": "loginViaEmailOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated successfully – OTP verified and user authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserFullWithTokenResponseDTO"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input (e.g., missing OTP, username, or malformed payload).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – Email already registered in the system.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity – OTP verification failed, expired, or invalid format.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/2fa": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify login using external 2FA mechanism",
        "description": "Verify a one-time 2FA code generated by an authenticator app (e.g., Google Authenticator) after a successful initial login.\n\n**Business Logic / Conditions:**\n- User must have completed the first login step and be pending 2FA verification.\n- The 2FA code must match the TOTP generated for the user.\n- If the code is invalid or expired, returns 422 Unprocessable Entity.\n- Returns access token, refresh token, roles, and permissions upon successful verification.",
        "operationId": "verifyTwoFactor",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "User ID pending 2FA verification"
                  },
                  "code": {
                    "type": "string",
                    "description": "6-digit code generated by authenticator app"
                  }
                },
                "required": ["userId", "code"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2FA verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserFullWithTokenResponseDTO"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing user ID or code",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity – 2FA code invalid or expired",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token invalid or session expired",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/social": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate user via social provider OAuth",
        "description": "Authenticate a user using social provider OAuth credentials.\n\n**Business Logic / Conditions:**\n- All personal and contact fields must be AES-256 encrypted before submission.\n- Social authentication requires valid access token and provider information.\n- `provider`, `providerName`, and `providerUserId` must match the social provider account.\n- System validates that `username` and required fields are present.\n- If required fields are missing or payload structure is invalid, returns **400 Bad Request**.\n- If the social account is already linked with another user, returns **409 Duplicate**.\n- If the access token is invalid or expired, returns **422 Unprocessable Entity**.",
        "operationId": "loginViaSocial",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginSocialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated successfully – social login validated and user authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserFullWithTokenResponseDTO"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input (e.g., missing access token or malformed payload).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – Social account already linked with another user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity – Access token invalid or expired.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/authorize/rbac": {
      "get": {
        "tags": ["Authorization (RBAC)"],
        "summary": "Check authentication and access token validity",
        "description": "Verify if the provided access token is valid and the user is authenticated.\n\n**Business Logic / Conditions:**\n- Access token must be included in the Authorization header (Bearer).\n- Returns user information and assigned roles if the token is valid.\n- If the token is missing or invalid, returns 401 Unauthorized.",
        "operationId": "checkAuthentication",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Access token is valid, user authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAuthenticationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing, expired, or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/authorize/rbac/permissions": {
      "get": {
        "tags": ["Authorization (RBAC)"],
        "summary": "Check if the authenticated user has a specific permission",
        "description": "Evaluate whether the user associated with the provided access token has the specified permission code.\n\n**Business Logic / Conditions:**\n- Access token must be included in the Authorization header (Bearer).\n- `policyCode` query parameter is required.\n- Returns `has_permission = true` if the user has the permission; otherwise false.\n- Returns 401 if the token is missing, expired, or invalid.",
        "operationId": "checkRbacPermission",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "policyCode",
            "in": "query",
            "description": "The code of the permission to check",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission evaluation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPermissionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid policy code",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/user-group": {
      "post": {
        "tags": ["Authorization (RBAC)"],
        "summary": "Create a new role with assigned permissions",
        "description": "Create one or multiple user group in the system with assigned permissions.\n\n**Business Logic / Conditions:**\n- Each role must have a unique name.\n- `name` is required; `description` is optional.\n- If a role with the same name already exists, returns **409 Duplicate**.\n- If required fields are missing or payload is malformed, returns **400 Bad Request**.\n- **Requires valid access token in Authorization header (Bearer).**",
        "operationId": "createRole",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Group(s) created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CreateRoleResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – User Group name already exists.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/user-group/{id}": {
      "put": {
        "tags": ["Authorization (RBAC)"],
        "summary": "Update an existing user group",
        "description": "Update a user group identified by `id` along with its associated policies.\n\n**Business Logic / Conditions:**\n- `id` is required and must exist.\n- `name` must be unique within the system.\n- Policies can be assigned with operators: READ, WRITE, DELETE, ALL.\n- Requires valid access token in Authorization header (Bearer).",
        "operationId": "updateUserGroup",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Group unique identifier (UUID)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Group updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Authorization (RBAC)"],
        "summary": "Delete a user group",
        "description": "Delete a user group identified by `id`. Requires valid access token.\n\n**Business Logic / Conditions:**\n- `id` must exist; otherwise, returns **404 Not Found**.",
        "operationId": "deleteUserGroup",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Group unique identifier (UUID)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User Group deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID of deleted user group"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/user-group/{id}/assign": {
      "post": {
        "tags": ["Authorization (RBAC)"],
        "summary": "Assign one or more user group to a user",
        "description": "Assign a role (identified by `id`) to a user within a user group.\n\n**Business Logic / Conditions:**\n- `id` is the role ID and must exist.\n- `userId` and `user_group_id` must exist in the system.\n- If the role is already assigned to the user, returns **409 Duplicate**.\n- Requires valid access token in Authorization header (Bearer).",
        "operationId": "assignUserRole",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Group unique identifier (UUID)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AssignUserRoleRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Group assigned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignUserRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – User Group is already assigned to the user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/user-group/{id}/revoke": {
      "post": {
        "tags": ["Authorization (RBAC)"],
        "summary": "Revoke assigned user group from a user",
        "description": "Revoke a User Group (identified by `id`) from a user in a user group.\n\n**Business Logic / Conditions:**\n- `id` is the role ID and must exist.\n- `userId` and `user_group_id` must exist and have the role assigned.\n- If the assignment does not exist, returns **404 Not Found**.\n- Requires valid access token in Authorization header (Bearer).",
        "operationId": "revokeUserRole",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Group Mapping unique identifier (UUID)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RevokeUserRoleRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Group revoked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeUserRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found – The role assignment does not exist.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/authorize/abac": {
      "post": {
        "tags": ["Authorization (ABAC)"],
        "summary": "Evaluate user access using attributes and context",
        "description": "Evaluate the authenticated user’s access based on ABAC attributes and context.\n\n**Business Logic / Conditions:**\n- Access token must be included in Authorization header (Bearer).\n- Returns user groups and the permissions the user has according to ABAC evaluation.\n- Returns 401 if the token is missing, expired, or invalid.",
        "operationId": "evaluateAccess",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EvaluateAccessRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access evaluated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid attributes",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token missing or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/auth/authorize/abac/permissions": {
      "post": {
        "tags": ["Authorization (ABAC)"],
        "summary": "Check if a user has access for a specific attribute",
        "description": "Evaluate whether the authenticated user has access based on a single ABAC attribute.\n\n**Business Logic / Conditions:**\n- Access token must be included in Authorization header (Bearer).\n- `attribute` query parameter is required.\n- Returns true if the user passes the attribute check, false otherwise.\n- Returns 401 if the access token is missing or invalid.",
        "operationId": "checkAbacAttribute",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "attribute",
            "in": "query",
            "description": "The attribute to check access for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute evaluation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "type": "boolean",
                      "description": "true if access is allowed, false if denied"
                    }
                  },
                  "required": ["status", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid attribute",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token missing or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/policies": {
      "post": {
        "tags": ["Authorization (ABAC/RBAC)"],
        "summary": "Create a new attribute-based access policy",
        "description": "Create a new ABAC policy in the system.\n\n**Business Logic / Conditions:**\n- `code` and `name` are required and must be unique.\n- `effect` can be 'allow' or 'deny'.\n- `action`, `resource`, and `condition_logic` define the policy rules.\n- If `code` or `name` already exists, returns **409 Duplicate**.\n- If required fields are missing or payload is malformed, returns **400 Bad Request**.\n- **Requires valid access token in Authorization header (Bearer).**",
        "operationId": "createPolicy",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Policy created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CreatePolicyResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid input.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – Policy code or name already exists.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/policies/{id}": {
      "put": {
        "tags": ["Authorization (ABAC/RBAC)"],
        "summary": "Update existing ABAC/RBAC policy rules",
        "description": "Update an ABAC/RBAC policy identified by `id`.\n\n**Business Logic / Conditions:**\n- `id` is required and must exist.\n- `code` and `name` must remain unique.\n- `effect` must be 'allow' or 'deny'.\n- Requires valid access token (Bearer).",
        "operationId": "updatePolicy",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Policy unique identifier (UUID)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Authorization (ABAC/RBAC)"],
        "summary": "Delete ABAC policy",
        "description": "Delete an ABAC policy identified by `id`. Requires valid access token.",
        "operationId": "deletePolicy",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Policy unique identifier (UUID)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": ["User Management"],
        "summary": "Create a new user record",
        "description": "Create a new user with profile, authentication, referral, address, and contact information.",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFullResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Invalid or missing fields",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "put": {
        "tags": ["User Management"],
        "summary": "Update user details",
        "description": "Update an existing user's personal, address, and contact details.",
        "operationId": "updateUser",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User unique identifier (UUID)",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFullResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found – User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User Management"],
        "summary": "Delete user record",
        "description": "Delete an existing user by their unique ID.",
        "operationId": "deleteUser",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Deleted user ID"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found – User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "tags": ["User Management"],
        "summary": "Retrieve authenticated user's profile",
        "description": "Fetch the profile of the currently authenticated user using the access token.",
        "operationId": "getAuthenticatedUserProfile",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFullResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token missing or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/sessions/validate": {
      "post": {
        "tags": ["Session Management"],
        "summary": "Validate user session or access token",
        "description": "Validate the provided access token and return user roles and permissions if valid.\n\n**Business Logic / Conditions:**\n- Access token must be included in Authorization header (Bearer).\n- Returns 401 if token is missing, expired, or invalid.",
        "operationId": "validateSession",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Session validated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token missing or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/sessions/refresh": {
      "post": {
        "tags": ["Session Management"],
        "summary": "Generate a new access token using refresh token",
        "description": "Refresh the access token using a valid refresh token.\n\n**Business Logic / Conditions:**\n- Refresh token must be provided in the request body.\n- Returns a new access token, refresh token, roles, and permissions.\n- Returns 401 if the refresh token is invalid or expired.",
        "operationId": "refreshToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Refresh token to generate a new access token"
                  }
                },
                "required": ["refreshToken"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid refresh token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Refresh token invalid or expired",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/sessions/logout": {
      "post": {
        "tags": ["Session Management"],
        "summary": "Logout user and invalidate active session",
        "description": "Logout the user by invalidating the current access token and refresh token.\n\n**Business Logic / Conditions:**\n- Access token must be included in Authorization header (Bearer).\n- After logout, the access token and refresh token are no longer valid.\n- Returns 401 if the token is missing or already invalidated.",
        "operationId": "logoutUser",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User session invalidated successfully"
                        }
                      },
                      "required": ["message"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/attributes": {
      "get": {
        "tags": ["Attribute Management"],
        "summary": "Retrieve all user attributes",
        "description": "Fetch all user-defined attribute definitions available in the system.\n\n**Business Logic / Conditions:**\n- Requires valid access token.\n- Returns an array of attributes.\n- Supports pagination and filtering in future versions.",
        "operationId": "getUserAttributes",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Attributes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttributeResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Attribute Management"],
        "summary": "Add a new attribute definition",
        "description": "Create one or more attribute definitions for ABAC policies or user metadata.\n\n**Business Logic / Conditions:**\n- Each attribute `key` must be unique.\n- `category`, `key`, `dataType`, and `title` are required.\n- Returns 409 if the key already exists.",
        "operationId": "addAttribute",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAttributeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute(s) created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttributeResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or invalid fields",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Duplicate – Attribute key already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/attributes/{id}": {
      "put": {
        "tags": ["Attribute Management"],
        "summary": "Modify attribute data or values",
        "description": "Update the metadata or configuration of an existing attribute definition.\n\n**Business Logic / Conditions:**\n- `id` is required and must exist.\n- Duplicate `key` not allowed.\n- Requires valid access token.",
        "operationId": "updateAttribute",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier (UUID) of the attribute to update",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttributeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": { "$ref": "#/components/schemas/AttributeResponse" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Invalid payload or missing field",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found – Attribute not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Invalid or missing token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Attribute Management"],
        "summary": "Delete an existing attribute",
        "description": "Delete an attribute by its `id`.\n\n**Business Logic / Conditions:**\n- `id` must exist.\n- Requires valid access token.\n- Returns 404 if not found.",
        "operationId": "deleteAttribute",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier (UUID) of the attribute",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ResponseStatusDTO"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID of deleted attribute"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found – Attribute not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Invalid or missing token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/logs/auth": {
      "post": {
        "tags": ["Infra & DevOps"],
        "summary": "Log authentication and security events",
        "description": "Record authentication-related or security-related events such as login attempts, OTP verifications, password resets, and suspicious access patterns.\n\n**Business Logic / Conditions:**\n- Used internally by authentication microservice to persist audit logs.\n- Event data should include `eventType`, `userId`, and contextual metadata.\n- Returns 201 on successful log creation.",
        "operationId": "logAuthEvent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthLogRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Log recorded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Invalid or missing log data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/logs/auth/failed": {
      "get": {
        "tags": ["Infra & DevOps"],
        "summary": "Retrieve list of failed login attempts",
        "description": "Fetch a list of recent failed authentication attempts, filtered by time range, username, or IP address.\n\n**Business Logic / Conditions:**\n- Only accessible by system administrators.\n- Can be used for intrusion detection and rate-limiting analysis.\n- Requires valid admin access token (Bearer).",
        "operationId": "getFailedLoginAttempts",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start date/time filter (ISO 8601)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date/time filter (ISO 8601)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter by username",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ipAddress",
            "in": "query",
            "description": "Filter by originating IP address",
            "required": false,
            "schema": { "type": "string", "format": "ipv4" }
          }
        ],
        "responses": {
          "200": {
            "description": "Failed login attempts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedLoginListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Missing or invalid access token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/alerts/security": {
      "post": {
        "tags": ["Infra & DevOps"],
        "summary": "Send security-related notifications or alerts",
        "description": "Send a security alert to the monitoring or notification system (e.g., Slack, PagerDuty, email, SMS).\n\n**Business Logic / Conditions:**\n- Triggered automatically when suspicious activity or system breach is detected.\n- Requires `severity`, `alertType`, and `description` fields.\n- Returns 201 if the alert is successfully logged or dispatched.",
        "operationId": "sendSecurityAlert",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityAlertRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Security alert sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAlertResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Invalid or missing alert information",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Missing or invalid access token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "x-microservice-info": {
    "service-name": "iam-service",
    "version": "1.0.0",
    "team": "Platform Engineering",
    "repository": "https://github.com/example/iam-service",
    "documentation": "https://docs.example.com/iam",
    "monitoring": "https://monitoring.example.com/iam",
    "health-check": "/api/health",
    "metrics": "/api/metrics",
    "dependencies": [
      {
        "name": "postgresql",
        "type": "database",
        "version": "14+"
      },
      {
        "name": "redis",
        "type": "cache",
        "version": "6+"
      },
      {
        "name": "notification-service",
        "type": "microservice",
        "version": "1.0.0"
      }
    ],
    "deployment": {
      "environment": "kubernetes",
      "replicas": 3,
      "resources": {
        "cpu": "500m",
        "memory": "1Gi"
      }
    }
  },
  "components": {
    "schemas": {
      "BaseUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9._-]+$",
            "description": "Unique username for the user. Must be 8-64 characters, alphanumeric with dots, underscores, or hyphens only."
          }
        },
        "required": ["username"],
        "additionalProperties": false
      },
      "BaseUserProfile": {
        "type": "object",
        "description": "Base user profile information containing personal details and identification data",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user profile",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "x-data-dictionary": {
              "field-type": "primary-key",
              "business-meaning": "Unique user identifier across all systems",
              "data-lineage": "Generated by IAM service during user creation",
              "sensitivity": "internal",
              "retention-policy": "permanent"
            }
          },
          "code": {
            "type": "string",
            "minLength": 3,
            "maxLength": 20,
            "pattern": "^[A-Z0-9_]+$",
            "description": "Business code for the user (e.g., EMP001, CUST123)",
            "example": "EMP001",
            "x-data-dictionary": {
              "field-type": "business-key",
              "business-meaning": "Human-readable user identifier for business operations",
              "data-lineage": "Assigned by business rules during user creation",
              "sensitivity": "internal",
              "retention-policy": "permanent"
            }
          },
          "prefixName": {
            "type": "string",
            "maxLength": 10,
            "description": "Name prefix (Mr., Mrs., Dr., etc.)",
            "example": "Mr.",
            "x-data-dictionary": {
              "field-type": "personal-data",
              "business-meaning": "Title or prefix for addressing the user",
              "data-lineage": "Provided by user during registration",
              "sensitivity": "personal",
              "retention-policy": "7-years-after-deletion"
            }
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-zA-Z\\s\\-\\.']+$",
            "description": "User's first name",
            "example": "John",
            "x-data-dictionary": {
              "field-type": "personal-data",
              "business-meaning": "Legal first name of the user",
              "data-lineage": "Provided by user during registration",
              "sensitivity": "personal",
              "retention-policy": "7-years-after-deletion"
            }
          },
          "middleName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z\\s\\-\\.']*$",
            "description": "User's middle name (optional)",
            "example": "Michael",
            "x-data-dictionary": {
              "field-type": "personal-data",
              "business-meaning": "Middle name or initial of the user",
              "data-lineage": "Provided by user during registration",
              "sensitivity": "personal",
              "retention-policy": "7-years-after-deletion"
            }
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-zA-Z\\s\\-\\.']+$",
            "description": "User's last name",
            "example": "Doe",
            "x-data-dictionary": {
              "field-type": "personal-data",
              "business-meaning": "Legal last name or surname of the user",
              "data-lineage": "Provided by user during registration",
              "sensitivity": "personal",
              "retention-policy": "7-years-after-deletion"
            }
          },
          "nickName": {
            "type": "string",
            "maxLength": 30,
            "pattern": "^[a-zA-Z0-9\\s\\-\\.']*$",
            "description": "User's preferred nickname (optional)",
            "example": "Johnny",
            "x-data-dictionary": {
              "field-type": "personal-data",
              "business-meaning": "Preferred name for informal addressing",
              "data-lineage": "Provided by user during registration",
              "sensitivity": "personal",
              "retention-policy": "7-years-after-deletion"
            }
          },
          "gender": {
            "type": "string",
            "enum": ["MALE", "FEMALE", "OTHER", "PREFER_NOT_TO_SAY"],
            "description": "User's gender identity",
            "example": "MALE",
            "x-data-dictionary": {
              "field-type": "personal-data",
              "business-meaning": "Gender identity for demographic and personalization purposes",
              "data-lineage": "Provided by user during registration",
              "sensitivity": "personal",
              "retention-policy": "7-years-after-deletion"
            }
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "User's date of birth in YYYY-MM-DD format",
            "example": "1990-05-15",
            "x-data-dictionary": {
              "field-type": "personal-data",
              "business-meaning": "Birth date for age verification and demographic analysis",
              "data-lineage": "Provided by user during registration",
              "sensitivity": "personal",
              "retention-policy": "7-years-after-deletion"
            }
          }
        },
        "additionalProperties": false,
        "x-data-dictionary": {
          "schema-purpose": "Core user profile data",
          "business-domain": "Identity Management",
          "data-classification": "Personal Information",
          "compliance-requirements": ["GDPR", "CCPA", "SOX"],
          "update-frequency": "Low",
          "access-patterns": ["Read-heavy", "Occasional updates"]
        }
      },
      "OtpAuthentication": {
        "type": "object",
        "description": "One-Time Password authentication data for secure user verification",
        "properties": {
          "otp": {
            "type": "string",
            "minLength": 4,
            "maxLength": 8,
            "pattern": "^[0-9]+$",
            "description": "One-time password code sent to user's device",
            "example": "123456",
            "x-data-dictionary": {
              "field-type": "authentication-data",
              "business-meaning": "Temporary verification code for user authentication",
              "data-lineage": "Generated by OTP service and sent to user's device",
              "sensitivity": "sensitive",
              "retention-policy": "expires-after-5-minutes",
              "encryption-required": true
            }
          },
          "codeRef": {
            "type": "string",
            "minLength": 8,
            "maxLength": 32,
            "pattern": "^[A-Z0-9_]+$",
            "description": "Reference code linking OTP to the specific request",
            "example": "OTP_REF_20240115_001",
            "x-data-dictionary": {
              "field-type": "reference-data",
              "business-meaning": "Unique identifier for tracking OTP generation and validation",
              "data-lineage": "Generated by OTP service during code generation",
              "sensitivity": "internal",
              "retention-policy": "expires-after-10-minutes"
            }
          },
          "referenceId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique reference identifier for the OTP session",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "x-data-dictionary": {
              "field-type": "session-identifier",
              "business-meaning": "Session identifier for tracking OTP lifecycle",
              "data-lineage": "Generated by IAM service during OTP request",
              "sensitivity": "internal",
              "retention-policy": "expires-after-session-end"
            }
          }
        },
        "required": ["otp", "codeRef", "referenceId"],
        "additionalProperties": false,
        "x-data-dictionary": {
          "schema-purpose": "OTP-based authentication",
          "business-domain": "Authentication & Security",
          "data-classification": "Authentication Data",
          "compliance-requirements": ["PCI-DSS", "SOX"],
          "update-frequency": "High",
          "access-patterns": ["Write-once", "Read-once", "Short-lived"]
        }
      },
      "EncryptedPersonalInfo": {
        "type": "object",
        "properties": {
          "prefixName": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "firstName": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "middleName": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "lastName": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "nickName": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "gender": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          }
        }
      },
      "EncryptedAddressDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "addressAdditional": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "subDistrict": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "EncryptedContactDTO": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "enum": ["EMAIL", "MOBILE"]
          },
          "contact": {
            "type": "string",
            "description": "AES256_ENCRYPTED"
          }
        },
        "required": ["channel", "contact"]
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": { "type": "string" }
        }
      },
      "UserAuthenticationDTO": {
        "allOf": [{ "$ref": "#/components/schemas/BaseUserProfile" }]
      },
      "UserProfileDTO": {
        "allOf": [
          { "$ref": "#/components/schemas/BaseUserProfile" },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AddressDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "addressAdditional": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "subDistrict": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "ContactDTO": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "enum": ["EMAIL", "MOBILE"],
            "description": "Contact channel type"
          },
          "contact": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Contact information (email address or mobile number)"
          }
        },
        "required": ["channel", "contact"],
        "additionalProperties": false
      },
      "TokenDTO": {
        "type": "object",
        "description": "JWT token information for user authentication and authorization",
        "properties": {
          "accessToken": {
            "type": "string",
            "minLength": 100,
            "maxLength": 2000,
            "pattern": "^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$",
            "description": "JWT access token for API authentication",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
            "x-data-dictionary": {
              "field-type": "authentication-token",
              "business-meaning": "Bearer token for API access authorization",
              "data-lineage": "Generated by IAM service after successful authentication",
              "sensitivity": "highly-sensitive",
              "retention-policy": "expires-after-token-lifetime",
              "encryption-required": true,
              "token-claims": ["sub", "iat", "exp", "roles", "permissions"]
            }
          },
          "expiresIn": {
            "type": "integer",
            "minimum": 60,
            "maximum": 86400,
            "description": "Token expiration time in seconds (1 minute to 24 hours)",
            "example": 3600,
            "x-data-dictionary": {
              "field-type": "duration-data",
              "business-meaning": "Token validity period for security control",
              "data-lineage": "Calculated based on security policy and user preferences",
              "sensitivity": "internal",
              "retention-policy": "not-applicable",
              "business-rules": [
                "Default: 1 hour",
                "Max: 24 hours",
                "Min: 1 minute"
              ]
            }
          },
          "tokenType": {
            "type": "string",
            "enum": ["Bearer"],
            "default": "Bearer",
            "description": "Token type, always 'Bearer' for JWT tokens",
            "example": "Bearer",
            "x-data-dictionary": {
              "field-type": "constant-value",
              "business-meaning": "OAuth 2.0 token type specification",
              "data-lineage": "Fixed value per OAuth 2.0 standard",
              "sensitivity": "public",
              "retention-policy": "not-applicable"
            }
          },
          "refreshToken": {
            "type": "string",
            "format": "uuid",
            "description": "Refresh token UUID for obtaining new access tokens",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "x-data-dictionary": {
              "field-type": "refresh-token",
              "business-meaning": "Long-lived token for obtaining new access tokens",
              "data-lineage": "Generated by IAM service during token issuance",
              "sensitivity": "highly-sensitive",
              "retention-policy": "expires-after-refresh-lifetime",
              "encryption-required": true,
              "business-rules": [
                "Valid for 30 days",
                "Single-use per access token"
              ]
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 3,
              "maxLength": 50,
              "pattern": "^[A-Z_]+$"
            },
            "uniqueItems": true,
            "maxItems": 20,
            "description": "List of user roles",
            "example": ["ADMIN", "USER", "MANAGER"],
            "x-data-dictionary": {
              "field-type": "role-list",
              "business-meaning": "User roles for role-based access control",
              "data-lineage": "Assigned by administrators or derived from user groups",
              "sensitivity": "internal",
              "retention-policy": "permanent",
              "business-rules": [
                "Must be predefined roles",
                "Case-sensitive",
                "Uppercase only"
              ]
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 5,
              "maxLength": 100,
              "pattern": "^[A-Z_]+:[A-Z_]+$"
            },
            "uniqueItems": true,
            "maxItems": 100,
            "description": "List of user permissions in format 'RESOURCE:ACTION'",
            "example": ["USER:READ", "PROFILE:WRITE", "ADMIN:DELETE"],
            "x-data-dictionary": {
              "field-type": "permission-list",
              "business-meaning": "Granular permissions for fine-grained access control",
              "data-lineage": "Derived from roles and policies",
              "sensitivity": "internal",
              "retention-policy": "permanent",
              "business-rules": [
                "Format: RESOURCE:ACTION",
                "Must be predefined permissions"
              ]
            }
          }
        },
        "required": ["accessToken", "expiresIn", "tokenType"],
        "additionalProperties": false,
        "x-data-dictionary": {
          "schema-purpose": "Authentication token management",
          "business-domain": "Authentication & Authorization",
          "data-classification": "Authentication Data",
          "compliance-requirements": ["OAuth 2.0", "JWT", "PCI-DSS"],
          "update-frequency": "High",
          "access-patterns": ["Read-heavy", "Frequent updates"],
          "security-considerations": [
            "Token rotation",
            "Secure storage",
            "Audit logging"
          ]
        }
      },
      "ResponseStatusDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code or custom internal code"
          },
          "message": {
            "type": "string",
            "description": "General response message"
          },
          "bizErrorCode": {
            "type": "string",
            "description": "Business error code identifier"
          },
          "bizErrorMessage": {
            "type": "string",
            "description": "Detailed business error message"
          }
        },
        "required": ["code", "message"]
      },
      "UserFullResponseDTO": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDTO"
          },
          "personal": {
            "$ref": "#/components/schemas/UserProfileDTO"
          },
          "referral": {
            "$ref": "#/components/schemas/UserProfileDTO"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "contact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactDTO"
            }
          }
        },
        "required": ["user", "personal", "referral", "address", "contact"]
      },
      "UserFullWithTokenResponseDTO": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDTO"
          },
          "personal": {
            "$ref": "#/components/schemas/UserProfileDTO"
          },
          "referral": {
            "$ref": "#/components/schemas/UserProfileDTO"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "contact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactDTO"
            }
          },
          "token": {
            "$ref": "#/components/schemas/TokenDTO"
          }
        },
        "required": ["user", "personal", "referral", "address", "contact"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "authentication": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              }
            },
            "required": ["password"]
          }
        },
        "required": ["user", "authentication"]
      },
      "LoginMobileRequest": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/BaseUser" },
          "authentication": {
            "$ref": "#/components/schemas/OtpAuthentication"
          }
        },
        "required": ["user", "authentication"]
      },
      "LoginEmailRequest": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/BaseUser" },
          "authentication": {
            "$ref": "#/components/schemas/OtpAuthentication"
          }
        },
        "required": ["user", "authentication"]
      },
      "LoginSocialRequest": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/BaseUser" },
          "authentication": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string"
              },
              "providerName": {
                "type": "string"
              },
              "providerUserId": {
                "type": "string"
              },
              "accessToken": {
                "type": "string"
              },
              "refreshToken": {
                "type": "string"
              }
            },
            "required": ["provider", "providerUserId", "accessToken"]
          }
        },
        "required": ["user", "authentication"]
      },
      "CreateRoleRequest": {
        "type": "object",
        "properties": {
          "userGroup": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              },
              "required": ["name"]
            }
          }
        },
        "required": ["userGroup"]
      },
      "CreateRoleResponse": {
        "type": "object",
        "properties": {
          "userGroup": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CreatePolicyRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effect": {
            "type": "string",
            "enum": ["allow", "deny"]
          },
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "conditionLogic": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name",
          "effect",
          "action",
          "resource",
          "conditionLogic"
        ]
      },
      "CreatePolicyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the policy"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effect": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "conditionLogic": {
            "type": "string"
          }
        }
      },
      "UpdatePolicyRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effect": {
            "type": "string",
            "enum": ["allow", "deny"]
          },
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "conditionLogic": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "effect",
          "action",
          "resource",
          "conditionLogic"
        ]
      },
      "AssignUserRoleRequest": {
        "type": "object",
        "properties": {
          "userGroupId": { "type": "string", "format": "uuid" },
          "userId": { "type": "string", "format": "uuid" }
        },
        "required": ["userGroupId", "userId"]
      },
      "AssignUserRoleResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "userGroupMappingId": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the user-role assignment"
              },
              "userGroupId": { "type": "string", "format": "uuid" },
              "userId": { "type": "string", "format": "uuid" }
            },
            "required": ["userGroupMappingId", "userGroupId", "userId"]
          }
        }
      },
      "RevokeUserRoleRequest": {
        "type": "object",
        "properties": {
          "userGroupId": { "type": "string", "format": "uuid" },
          "userId": { "type": "string", "format": "uuid" }
        },
        "required": ["userGroupId", "userId"]
      },
      "RevokeUserRoleResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "userGroupMappingId": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the user-role assignment that was revoked"
              },
              "userGroupId": { "type": "string", "format": "uuid" },
              "userId": { "type": "string", "format": "uuid" }
            },
            "required": ["userGroupMappingId", "userGroupId", "userId"]
          }
        }
      },
      "UpdateUserGroupRequest": {
        "type": "object",
        "properties": {
          "userGroup": {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "description": { "type": "string" }
            },
            "required": ["name"]
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "policyId": { "type": "string", "format": "uuid" },
                "operator": {
                  "type": "string",
                  "enum": ["READ", "WRITE", "DELETE", "ALL"]
                }
              },
              "required": ["policyId", "operator"]
            }
          }
        },
        "required": ["userGroup", "policies"]
      },
      "UpdateUserGroupResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "userGroup": {
                "type": "object",
                "properties": {
                  "id": { "type": "string", "format": "uuid" },
                  "name": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["id", "name"]
              },
              "policies": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "policyId": { "type": "string", "format": "uuid" },
                    "operator": {
                      "type": "string",
                      "enum": ["READ", "WRITE", "DELETE", "ALL"]
                    }
                  },
                  "required": ["policyId", "operator"]
                }
              }
            },
            "required": ["userGroup", "policies"]
          }
        }
      },
      "CheckAuthenticationResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "roles": {
                "type": "array",
                "items": { "type": "string" },
                "description": "List of role codes assigned to the user"
              },
              "permissions": {
                "type": "array",
                "items": { "type": "string" },
                "description": "List of permissions in the format {policyCode:effect}"
              }
            },
            "required": ["userId", "username", "roles"]
          }
        }
      },
      "CheckPermissionResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "userId": { "type": "string", "format": "uuid" },
              "username": { "type": "string" },
              "policyCode": { "type": "string" },
              "hasPermission": { "type": "boolean" }
            },
            "required": ["userId", "username", "policyCode", "hasPermission"]
          }
        }
      },
      "LoginResponseToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Token expiration in seconds"
          },
          "tokenType": {
            "type": "string",
            "description": "Token type, e.g., Bearer"
          },
          "refreshToken": {
            "type": "string",
            "format": "uuid",
            "description": "Refresh token to obtain new access token"
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of role codes assigned to the user"
          },
          "permissions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of permissions in the format {policyCode:effect}"
          }
        },
        "required": [
          "accessToken",
          "expiresIn",
          "tokenType",
          "refreshToken",
          "roles",
          "permissions"
        ]
      },
      "SessionTokenResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "JWT access token"
              },
              "expiresIn": {
                "type": "integer",
                "description": "Token expiration in seconds"
              },
              "tokenType": {
                "type": "string",
                "description": "Token type, e.g., Bearer"
              },
              "refreshToken": {
                "type": "string",
                "format": "uuid",
                "description": "Refresh token to obtain new access token"
              },
              "roles": {
                "type": "array",
                "items": { "type": "string" },
                "description": "List of role codes assigned to the user"
              },
              "permissions": {
                "type": "array",
                "items": { "type": "string" },
                "description": "List of permissions in the format {policyCode:effect}"
              }
            },
            "required": [
              "accessToken",
              "expiresIn",
              "tokenType",
              "refreshToken",
              "roles",
              "permissions"
            ]
          }
        }
      },
      "EvaluatePolicyRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user for evaluation"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Key-value pairs of user attributes and context for ABAC evaluation"
          }
        },
        "required": ["userId", "attributes"]
      },
      "EvaluatePolicyResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "policies": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "policyCode": { "type": "string" },
                    "effect": { "type": "string", "enum": ["allow", "deny"] }
                  },
                  "required": ["policyCode", "effect"]
                }
              }
            },
            "required": ["policies"]
          }
        }
      },
      "EvaluateAccessRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID for evaluation"
          },
          "context": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Additional context key-value pairs for ABAC evaluation"
          }
        },
        "required": ["userId"]
      },
      "EvaluateAccessResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "userGroup": {
                "type": "array",
                "items": { "type": "string" },
                "description": "List of user groups the user belongs to"
              },
              "permissions": {
                "type": "array",
                "items": { "type": "string" },
                "description": "List of permissions in the format {policyCode}:{effect}"
              }
            },
            "required": ["userGroup", "permissions"]
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/BaseUser" },
          "personal": { "$ref": "#/components/schemas/EncryptedPersonalInfo" },
          "authentication": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "confirmPassword": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              }
            },
            "required": ["password", "confirmPassword"]
          },
          "referral": {
            "type": "object",
            "properties": {
              "code": { "type": "string" }
            }
          },
          "address": { "$ref": "#/components/schemas/AddressDTO" },
          "contact": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContactDTO" }
          }
        },
        "required": ["user", "authentication", "personal", "contact"]
      },
      "RegisterMobileRequest": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/BaseUser" },
          "authentication": {
            "$ref": "#/components/schemas/OtpAuthentication"
          },
          "personal": { "$ref": "#/components/schemas/EncryptedPersonalInfo" },
          "referral": {
            "type": "object",
            "properties": { "code": { "type": "string" } }
          },
          "address": { "$ref": "#/components/schemas/EncryptedAddressDTO" },
          "contact": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EncryptedContactDTO" }
          }
        },
        "required": ["user", "authentication", "personal", "contact"]
      },
      "RegisterEmailRequest": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/BaseUser" },
          "authentication": {
            "$ref": "#/components/schemas/OtpAuthentication"
          },
          "personal": { "$ref": "#/components/schemas/EncryptedPersonalInfo" },
          "referral": {
            "type": "object",
            "properties": { "code": { "type": "string" } }
          },
          "address": { "$ref": "#/components/schemas/EncryptedAddressDTO" },
          "contact": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EncryptedContactDTO" }
          }
        },
        "required": ["user", "authentication", "personal", "contact"]
      },
      "RegisterSocialRequest": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/BaseUser" },
          "authentication": {
            "type": "object",
            "properties": {
              "provider": { "type": "string" },
              "providerName": { "type": "string" },
              "providerUserId": { "type": "string" },
              "displayName": { "type": "string" },
              "profilePictureUrl": { "type": "string" },
              "accessToken": { "type": "string" },
              "refreshToken": { "type": "string" },
              "tokenExpiresAt": { "type": "string", "format": "date-time" },
              "rawResponse": { "type": "string" }
            },
            "required": [
              "provider",
              "providerName",
              "providerUserId",
              "accessToken"
            ]
          },
          "personal": {
            "type": "object",
            "properties": {
              "prefixName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "firstName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "middleName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "lastName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "nickName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "gender": { "type": "string", "description": "AES256_ENCRYPTED" },
              "dateOfBirth": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              }
            }
          },
          "referral": {
            "type": "object",
            "properties": { "code": { "type": "string" } }
          },
          "address": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "addressAdditional": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "state": { "type": "string" },
              "city": { "type": "string" },
              "district": { "type": "string" },
              "subDistrict": { "type": "string" },
              "postalCode": { "type": "string" }
            }
          },
          "contact": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "channel": { "type": "string", "enum": ["EMAIL", "MOBILE"] },
                "contact": {
                  "type": "string",
                  "description": "AES256_ENCRYPTED"
                }
              },
              "required": ["channel", "contact"]
            }
          }
        },
        "required": ["user", "authentication", "personal", "contact"]
      },
      "UserRegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": { "type": "string", "format": "uuid" },
              "username": { "type": "string" }
            },
            "required": ["id", "username"]
          },
          "personal": {
            "type": "object",
            "properties": {
              "prefixName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "firstName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "middleName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "lastName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "nickName": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "gender": { "type": "string", "description": "AES256_ENCRYPTED" },
              "dateOfBirth": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              }
            },
            "required": ["firstName", "lastName"]
          },
          "referral": {
            "type": "object",
            "properties": { "code": { "type": "string" } }
          },
          "address": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "addressAdditional": {
                "type": "string",
                "description": "AES256_ENCRYPTED"
              },
              "state": { "type": "string" },
              "city": { "type": "string" },
              "district": { "type": "string" },
              "subDistrict": { "type": "string" },
              "postalCode": { "type": "string" }
            }
          },
          "contact": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "channel": { "type": "string", "enum": ["EMAIL", "MOBILE"] },
                "contact": {
                  "type": "string",
                  "description": "AES256_ENCRYPTED"
                }
              },
              "required": ["channel", "contact"]
            }
          }
        },
        "required": ["user", "personal", "contact"]
      },
      "CreateAttributeRequest": {
        "type": "object",
        "properties": {
          "category": { "type": "string" },
          "key": { "type": "string" },
          "dataType": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "is_parameter": { "type": "boolean" },
          "is_required": { "type": "boolean" },
          "is_display": { "type": "boolean" }
        },
        "required": ["category", "key", "dataType", "title"]
      },
      "UpdateAttributeRequest": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/CreateAttributeRequest" },
          {
            "type": "object",
            "properties": {
              "id": { "type": "string", "format": "uuid" }
            },
            "required": ["id"]
          }
        ]
      },
      "AttributeResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "category": { "type": "string" },
          "key": { "type": "string" },
          "dataType": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "is_parameter": { "type": "boolean" },
          "is_required": { "type": "boolean" },
          "is_display": { "type": "boolean" }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "username": { "type": "string" }
            },
            "required": ["username"]
          },
          "personal": {
            "type": "object",
            "properties": {
              "prefixName": { "type": "string" },
              "firstName": { "type": "string" },
              "middleName": { "type": "string" },
              "lastName": { "type": "string" },
              "nickName": { "type": "string" },
              "gender": { "type": "string" },
              "dateOfBirth": { "type": "string", "format": "date" }
            }
          },
          "authentication": {
            "type": "object",
            "properties": {
              "isTemporary": { "type": "boolean" }
            }
          },
          "referral": {
            "type": "object",
            "properties": {
              "code": { "type": "string" }
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "state": { "type": "string" },
              "city": { "type": "string" },
              "district": { "type": "string" },
              "subDistrict": { "type": "string" },
              "postalCode": { "type": "string" }
            }
          },
          "contact": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "channel": { "type": "string", "enum": ["EMAIL", "MOBILE"] },
                "contact": { "type": "string" }
              },
              "required": ["channel", "contact"]
            }
          }
        },
        "required": ["user", "personal", "contact"]
      },
      "UpdateUserRequest": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/CreateUserRequest" },
          {
            "type": "object",
            "properties": {
              "id": { "type": "string", "format": "uuid" }
            },
            "required": ["id"]
          }
        ]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "username": { "type": "string" }
            }
          },
          "personal": {
            "type": "object",
            "properties": {
              "prefixName": { "type": "string" },
              "firstName": { "type": "string" },
              "middleName": { "type": "string" },
              "lastName": { "type": "string" },
              "nickName": { "type": "string" },
              "gender": { "type": "string" },
              "dateOfBirth": { "type": "string", "format": "date" }
            }
          },
          "authentication": {
            "type": "object",
            "properties": {
              "password": { "type": "string", "description": "PlainPassword" },
              "isTemporary": { "type": "boolean" }
            }
          },
          "referral": {
            "type": "object",
            "properties": {
              "code": { "type": "string" }
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "state": { "type": "string" },
              "city": { "type": "string" },
              "district": { "type": "string" },
              "subDistrict": { "type": "string" },
              "postalCode": { "type": "string" }
            }
          },
          "contact": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "channel": { "type": "string", "enum": ["MOBILE", "EMAIL"] },
                "contact": { "type": "string" }
              }
            }
          }
        }
      },
      "UserFullResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": { "type": "string", "format": "uuid" },
              "username": { "type": "string" }
            }
          },
          "personal": {
            "type": "object",
            "properties": {
              "id": { "type": "string", "format": "uuid" },
              "code": { "type": "string" },
              "prefixName": { "type": "string" },
              "firstName": { "type": "string" },
              "middleName": { "type": "string" },
              "lastName": { "type": "string" },
              "nickName": { "type": "string" },
              "gender": { "type": "string" },
              "dateOfBirth": { "type": "string" }
            }
          },
          "authentication": {
            "type": "object",
            "properties": {
              "id": { "type": "string", "format": "uuid" },
              "password": { "type": "string", "description": "PlainPassword" },
              "isTemporary": { "type": "boolean" }
            }
          },
          "referral": {
            "type": "object",
            "properties": {
              "id": { "type": "string", "format": "uuid" },
              "prefixName": { "type": "string" },
              "firstName": { "type": "string" },
              "middleName": { "type": "string" },
              "lastName": { "type": "string" },
              "nickName": { "type": "string" }
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "state": { "type": "string" },
              "city": { "type": "string" },
              "district": { "type": "string" },
              "subDistrict": { "type": "string" },
              "postalCode": { "type": "string" }
            }
          },
          "contact": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "channel": { "type": "string", "enum": ["MOBILE", "EMAIL"] },
                "contact": { "type": "string" }
              }
            }
          }
        }
      },
      "AuthLogRequest": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "format": "uuid" },
          "username": { "type": "string" },
          "eventType": {
            "type": "string",
            "enum": [
              "LOGIN_SUCCESS",
              "LOGIN_FAILED",
              "LOGOUT",
              "TOKEN_REFRESH",
              "OTP_SENT",
              "OTP_FAILED"
            ]
          },
          "ipAddress": { "type": "string", "format": "ipv4" },
          "userAgent": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "additionalInfo": { "type": "object" }
        },
        "required": ["eventType", "timestamp"]
      },
      "AuthLogResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "logId": { "type": "string", "format": "uuid" },
              "eventType": { "type": "string" },
              "timestamp": { "type": "string", "format": "date-time" }
            }
          }
        }
      },
      "FailedLoginListResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string", "format": "uuid" },
                "username": { "type": "string" },
                "ipAddress": { "type": "string" },
                "userAgent": { "type": "string" },
                "timestamp": { "type": "string", "format": "date-time" },
                "failureReason": { "type": "string" }
              }
            }
          }
        }
      },
      "SecurityAlertRequest": {
        "type": "object",
        "properties": {
          "alertType": {
            "type": "string",
            "enum": [
              "SUSPICIOUS_LOGIN",
              "MULTIPLE_FAILED_ATTEMPTS",
              "TOKEN_ABUSE",
              "DATA_BREACH",
              "CONFIG_CHANGE"
            ]
          },
          "severity": {
            "type": "string",
            "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
          },
          "description": { "type": "string" },
          "source": { "type": "string" },
          "detectedAt": { "type": "string", "format": "date-time" },
          "metadata": { "type": "object" }
        },
        "required": ["alertType", "severity", "description"]
      },
      "SecurityAlertResponse": {
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/ResponseStatusDTO" },
          "data": {
            "type": "object",
            "properties": {
              "alertId": { "type": "string", "format": "uuid" },
              "alertType": { "type": "string" },
              "severity": { "type": "string" },
              "createdAt": { "type": "string", "format": "date-time" }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ResponseStatusDTO" }],
            "examples": [
              {
                "code": 400,
                "message": "Bad Request",
                "bizErrorCode": "IAM_400",
                "bizErrorMessage": "Invalid or missing required field."
              },
              {
                "code": 409,
                "message": "Duplicate Entry",
                "bizErrorCode": "IAM_409",
                "bizErrorMessage": "Username or contact already exists."
              },
              {
                "code": 422,
                "message": "Unprocessable Entity",
                "bizErrorCode": "IAM_422_001",
                "bizErrorMessage": "Password and confirm password do not match."
              },
              {
                "code": 422,
                "message": "Unprocessable Entity",
                "bizErrorCode": "IAM_422_002",
                "bizErrorMessage": "Password format does not meet security policy."
              },
              {
                "code": 422,
                "message": "Unprocessable Entity",
                "bizErrorCode": "IAM_422_SOCIAL_INVALID",
                "bizErrorMessage": "Social access token is invalid or expired."
              },
              {
                "code": 401,
                "message": "Unauthorized",
                "bizErrorCode": "IAM_401",
                "bizErrorMessage": "Access token is missing, invalid, or expired."
              },
              {
                "code": 404,
                "message": "Not Found",
                "bizErrorCode": "IAM_404",
                "bizErrorMessage": "Policy with the specified ID does not exist."
              },
              {
                "code": 422,
                "message": "Unprocessable Entity",
                "bizErrorCode": "IAM_422_OTP_INVALID",
                "bizErrorMessage": "OTP is invalid, expired, or does not match."
              }
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication. Include the token in the Authorization header as 'Bearer <token>'"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API Key for service-to-service authentication"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "OAuth 2.0 authentication for third-party integrations",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.example.com/oauth/authorize",
            "tokenUrl": "https://auth.example.com/oauth/token",
            "scopes": {
              "read": "Read access to user data",
              "write": "Write access to user data",
              "admin": "Administrative access"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://auth.example.com/oauth/token",
            "scopes": {
              "service": "Service-to-service access"
            }
          }
        }
      },
      "BasicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic authentication for internal services (not recommended for external APIs)"
      }
    },
    "x-data-dictionary": {
      "version": "1.0.0",
      "last-updated": "2024-01-15T10:30:00Z",
      "description": "Comprehensive data dictionary for IAM Microservice API",
      "data-classifications": {
        "public": "Data that can be freely shared",
        "internal": "Data for internal use only",
        "personal": "Personal information requiring GDPR compliance",
        "sensitive": "Sensitive data requiring encryption",
        "highly-sensitive": "Highly sensitive data requiring strong encryption and audit"
      },
      "field-types": {
        "primary-key": "Unique identifier for database records",
        "business-key": "Human-readable business identifier",
        "personal-data": "Personal information about individuals",
        "authentication-data": "Data used for user authentication",
        "authentication-token": "JWT or similar authentication tokens",
        "refresh-token": "Long-lived token for token refresh",
        "reference-data": "Reference information linking related data",
        "session-identifier": "Unique identifier for user sessions",
        "duration-data": "Time-based data (durations, intervals)",
        "constant-value": "Fixed values that don't change",
        "role-list": "List of user roles",
        "permission-list": "List of user permissions",
        "audit-data": "Data for audit and compliance tracking"
      },
      "business-domains": {
        "Identity Management": "Core user identity and profile management",
        "Authentication & Security": "User authentication and security controls",
        "Authorization": "Access control and permissions",
        "Session Management": "User session lifecycle management",
        "Audit & Compliance": "Audit trails and compliance tracking"
      },
      "compliance-frameworks": {
        "GDPR": "General Data Protection Regulation",
        "CCPA": "California Consumer Privacy Act",
        "SOX": "Sarbanes-Oxley Act",
        "PCI-DSS": "Payment Card Industry Data Security Standard",
        "HIPAA": "Health Insurance Portability and Accountability Act",
        "OAuth 2.0": "OAuth 2.0 Authorization Framework",
        "JWT": "JSON Web Token standard"
      },
      "retention-policies": {
        "permanent": "Data retained permanently",
        "7-years-after-deletion": "Data retained for 7 years after user deletion",
        "expires-after-5-minutes": "Data expires after 5 minutes",
        "expires-after-10-minutes": "Data expires after 10 minutes",
        "expires-after-session-end": "Data expires when session ends",
        "expires-after-token-lifetime": "Data expires with token lifetime",
        "expires-after-refresh-lifetime": "Data expires with refresh token lifetime",
        "not-applicable": "Retention policy not applicable"
      },
      "data-lineage-patterns": {
        "Generated by IAM service during user creation": "System-generated during user registration",
        "Provided by user during registration": "User-provided during account creation",
        "Assigned by business rules during user creation": "Business logic assigned identifiers",
        "Generated by OTP service and sent to user's device": "OTP service generated codes",
        "Generated by OTP service during code generation": "OTP service reference codes",
        "Generated by IAM service during OTP request": "IAM service session tracking",
        "Generated by IAM service after successful authentication": "Post-authentication token generation",
        "Calculated based on security policy and user preferences": "Policy-based calculations",
        "Fixed value per OAuth 2.0 standard": "Standards-compliant fixed values",
        "Generated by IAM service during token issuance": "Token issuance process",
        "Assigned by administrators or derived from user groups": "Administrative role assignment",
        "Derived from roles and policies": "Policy-based permission derivation"
      },
      "access-patterns": {
        "Read-heavy": "Frequent read operations, infrequent writes",
        "Write-once": "Data written once, rarely updated",
        "Read-once": "Data read once, then discarded",
        "Short-lived": "Data with short lifecycle",
        "Occasional updates": "Infrequent update operations",
        "Frequent updates": "Regular update operations"
      },
      "security-considerations": {
        "encryption-required": "Data must be encrypted at rest and in transit",
        "token-rotation": "Tokens must be rotated regularly",
        "secure-storage": "Data must be stored securely",
        "audit-logging": "All access must be logged for audit",
        "access-control": "Strict access control required",
        "data-masking": "Sensitive data must be masked in logs"
      },
      "business-rules": {
        "Default: 1 hour": "Default token expiration time",
        "Max: 24 hours": "Maximum token expiration time",
        "Min: 1 minute": "Minimum token expiration time",
        "Valid for 30 days": "Refresh token validity period",
        "Single-use per access token": "Refresh token usage rule",
        "Must be predefined roles": "Role validation rule",
        "Case-sensitive": "Case sensitivity requirement",
        "Uppercase only": "Uppercase format requirement",
        "Format: RESOURCE:ACTION": "Permission format specification",
        "Must be predefined permissions": "Permission validation rule"
      },
      "schema-evolution": {
        "versioning-strategy": "Semantic versioning with backward compatibility",
        "deprecation-policy": "Fields deprecated for 2 major versions before removal",
        "breaking-changes": "Require major version increment",
        "non-breaking-changes": "Minor version increment allowed",
        "field-lifecycle": {
          "introduced": "Field added in version X.Y.Z",
          "deprecated": "Field marked for removal in version X+2.Y.Z",
          "removed": "Field removed in version X+2.Y.Z"
        }
      },
      "extensibility-patterns": {
        "additional-properties": "Use additionalProperties: false for strict schemas",
        "custom-fields": "Use x-custom-* extensions for non-standard fields",
        "polymorphism": "Use allOf/oneOf/anyOf for flexible object composition",
        "conditional-fields": "Use if/then/else for conditional field requirements",
        "dynamic-enums": "Use x-enum-values for dynamically populated enums"
      },
      "data-quality-rules": {
        "required-fields": "All required fields must be present and non-null",
        "format-validation": "All fields must match specified format patterns",
        "length-constraints": "String fields must be within min/max length limits",
        "enum-validation": "Enum fields must contain only predefined values",
        "pattern-matching": "String fields must match specified regex patterns",
        "range-validation": "Numeric fields must be within min/max value ranges"
      },
      "api-versioning": {
        "current-version": "v1.0.0",
        "supported-versions": ["v1.0.0"],
        "version-strategy": "URL path versioning (/v1/iam/)",
        "deprecation-notice": "Minimum 6 months notice for API version deprecation",
        "migration-guide": "https://docs.example.com/iam/migration-guide"
      }
    }
  }
}
